//定义cell类型：描述一个格子
function cell(r,c,src){
	//三个属性：r,c,src
	this.r=r;
	this.c=c;
	this.src=src;
}

function States(r0,c0,r1,c1,r2,c2,r3,c3){
	this.r0=r0;   this.c0 =c0;
	this.r1=r1;   this.c1 =c1;
	this.r2=r2;   this.c2 =c2;
	this.r3=r3;   this.c3 =c3;
}

//定义shape类型：描述一个图形
function Shape(cells,src,states,orgi){
//两个属性：cells,src
	//为当前对象添加cells 属性，值为cells
	this.cells=cells;
	//遍历当前对象的cells数组中每个cell
	for (var i=0;i<this.cells.length ;i++ )
	{
		//设置当前cell的src为src
		this.cells[i].src =src;
	}
	this.states = states;
	this.orgi = orgi;
	this.statei=0;
}

//在shape的原型对象中添加一个IMGS属性为{T:"img/T.png",...}
Shape.prototype.IMGS ={
	T:"img/T.png",
	O:"img/O.png",
	L:"img/L.png",
	I:"img/I.png",
	S:"img/S.png",
	Z:"img/Z.png",
	J:"img/J.png"
	};

//在shape的原型对象中添加moveDown方法
Shape.prototype.moveDown= function(){
	for (var i=0;i<this.cells.length ;i++ )
	{
		this.cells[i].r +=1;
	}
}
//在shape的原型对象中添加moveLeft方法
Shape.prototype.moveLeft= function(){
	for (var i=0;i<this.cells.length ;i++ )
	{
		this.cells[i].c -=1;
	}
}
//在shape的原型对象中添加moveRight方法
Shape.prototype.moveRight= function(){
	for (var i=0;i<this.cells.length ;i++ )
	{
		this.cells[i].c +=1;
	}
}
Shape.prototype.rotateR=function(){  //右转
	this.statei++;
	//debugger;
	if(this.statei==this.states.length){
		this.statei=0;
	}
	
	this.rotate();
}
Shape.prototype.rotateL=function(){   //左转
	this.statei--;
	if(this.statei==-1){
		this.statei=this.states.length-1;
	}
	this.rotate();
}
Shape.prototype.rotate=function(){  //左右旋转公共方法
	var state = this.states[this.statei];
	var orgCell = this.cells[this.orgi];
	for (var i=0;i<this.cells.length ;i++ )
	{
		this.cells[i].r = orgCell.r+state["r"+i];
		this.cells[i].c = orgCell.c+state["c"+i];
	}
}
// 定义T类型：描述T图形
	function T(){
		//借用shape类型构造函数
		//参数1：[new cell(0,3),new cell(0,4),new cell(0,5),new cell(1,4),]
		Shape.call(this,[new cell(0,3),new cell(0,4),new cell(0,5),new cell(1,4)],
			this.IMGS.T,[new States(0,-1,0,0,0,+1,+1,0),
						 new States(-1,0,0,0,1,0,0,-1),
						 new States(0,+1,0,0,0,-1,-1,0),
						 new States(+1,0,0,0,-1,0,0,+1)],1);	
	}
	//让T类型原型对象继承shape类型的原型对象
	T.prototype=Shape.prototype;

//定义O类型：描述O图形
	function O(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5)],
			this.IMGS.O ,
			[new States(0,-1,0,0,+1,-1,+1,0)]
			,1);	
	}
	//让O类型原型对象继承shape类型的原型对象
	O.prototype=Shape.prototype;

	//定义L类型：描述L图形
	function L(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,3),new cell(1,3),new cell(2,3),new cell(2,4)],
			this.IMGS.L ,
			[new States(-1,0,0,0,1,0,1,1),
			 new States(0,1,0,0,0,-1,1,-1),
			 new States(1,0,0,0,-1,0,-1,-1),
			 new States(0,-1,0,0,0,1,-1,1)]
			,1);	
	}
	//让L类型原型对象继承shape类型的原型对象
	L.prototype=Shape.prototype;

	//定义I类型：描述I图形
	function I(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,3),new cell(1,3),new cell(2,3),new cell(3,3)],
			this.IMGS.I ,
			[new States(-1,0,  0,0,  1,0,  2,0),
			 new States(0,-1,  0,0,  0,1,  0,2)]
			,1);	
	}
	//让I类型原型对象继承shape类型的原型对象
	I.prototype=Shape.prototype;

	//定义S类型：描述S图形
	function S(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,3),new cell(1,3),new cell(1,4),new cell(2,4)],
			this.IMGS.S,
			[new States(-1,0,  0,0,  0,1,  1,1),
			 new States(0,1,  0,0,  1,0,  1,-1)]
			,1);	
	}
	//让I类型原型对象继承shape类型的原型对象
	S.prototype=Shape.prototype;

	//定义Z类型：描述Z图形
	function Z(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,3),new cell(0,4),new cell(1,4),new cell(1,5)],
			this.IMGS.Z,
			[new States(0,-1,  0,0,  1,0,  1,1),
			 new States(-1,0,  0,0,  0,-1,  1,-1)]
			,1);	
	}
	//让I类型原型对象继承shape类型的原型对象
	Z.prototype=Shape.prototype;

	//定义J类型：描述J图形
	function J(){
	//借用shape类型构造函数
		//参数1：[new cell(0,4),new cell(0,5),new cell(1,4),new cell(1,5),]
		Shape.call(this,[new cell(0,3),new cell(0,4),new cell(1,4),new cell(2,4)],
			this.IMGS.J
		);	
	}
	//让I类型原型对象继承shape类型的原型对象
	J.prototype=Shape.prototype;
	/********************************************/
